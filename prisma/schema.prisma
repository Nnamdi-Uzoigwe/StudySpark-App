// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  // Your custom relations for learning platform
  chatMessages     ChatMessage[]
  recommendations  CourseRecommendation[]
  learningProgress LearningProgress[]
  preferences      UserPreference?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your custom models for the learning platform
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  response  String   @db.Text
  timestamp DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseRecommendation {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  courseName  String
  reason      String   @db.Text
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningProgress {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  progress     Float    @default(0)
  completedAt  DateTime?
  lastAccessed DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  preferredTopics   String[] // Array of topics user is interested in
  learningPace      String   @default("medium") // slow, medium, fast
  difficultyLevel   String   @default("beginner") // beginner, intermediate, advanced
  notificationsEnabled Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}